'''1. Building a classifier for real vs AI images
This classifier will:
Train on a labeled dataset of real and AI-generated images.
Identify patterns distinguishing real from AI-generated images.'''


import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import EarlyStopping

# Load and preprocess data
img_size = (128, 128)
batch_size = 32

datagen = ImageDataGenerator(rescale=1.0 / 255, validation_split=0.2)
train_data = datagen.flow_from_directory(
    "path/to/dataset",
    target_size=img_size,
    batch_size=batch_size,
    class_mode="binary",
    subset="training",
)
val_data = datagen.flow_from_directory(
    "path/to/dataset",
    target_size=img_size,
    batch_size=batch_size,
    class_mode="binary",
    subset="validation",
)

# Build the CNN model
model = Sequential([
    Conv2D(32, (3, 3), activation="relu", input_shape=(128, 128, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation="relu"),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation="relu"),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation="relu"),
    Dropout(0.5),
    Dense(1, activation="sigmoid"),  # Binary classification
])

model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])

# Train the model
early_stop = EarlyStopping(monitor="val_loss", patience=5, restore_best_weights=True)
model.fit(train_data, validation_data=val_data, epochs=20, callbacks=[early_stop])

# Save the model
model.save("real_vs_ai_classifier.h5")
