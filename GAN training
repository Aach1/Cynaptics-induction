# 3. Train a GAN and Use the Discriminator

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Reshape, Flatten, Conv2D, UpSampling2D, LeakyReLU
from tensorflow.keras.optimizers import Adam

# GAN Parameters
latent_dim = 100

# Build Generator
def build_generator():
    model = Sequential([
        Dense(256 * 16 * 16, activation="relu", input_dim=latent_dim),
        Reshape((16, 16, 256)),
        UpSampling2D(),
        Conv2D(128, (3, 3), padding="same"),
        LeakyReLU(alpha=0.2),
        UpSampling2D(),
        Conv2D(64, (3, 3), padding="same"),
        LeakyReLU(alpha=0.2),
        Conv2D(3, (3, 3), activation="tanh", padding="same"),
    ])
    return model

# Build Discriminator
def build_discriminator():
    model = Sequential([
        Conv2D(64, (3, 3), strides=(2, 2), input_shape=(128, 128, 3), padding="same"),
        LeakyReLU(alpha=0.2),
        Conv2D(128, (3, 3), strides=(2, 2), padding="same"),
        LeakyReLU(alpha=0.2),
        Flatten(),
        Dense(1, activation="sigmoid"),
    ])
    return model

# Compile GAN
discriminator = build_discriminator()
discriminator.compile(optimizer=Adam(0.0002, 0.5), loss="binary_crossentropy", metrics=["accuracy"])

generator = build_generator()
gan = Sequential([generator, discriminator])
gan.compile(optimizer=Adam(0.0002, 0.5), loss="binary_crossentropy")

# Train GAN
# Use similar training loop as before
